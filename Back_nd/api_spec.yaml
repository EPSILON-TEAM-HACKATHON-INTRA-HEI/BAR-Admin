openapi: 3.0.0
info:
  version: "1.0.0"
  title: bar cocktail management
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Miaritiana/barCocktailManagement/1.0.0
  - url: 'http://localhost:8000'
tags:
  - name: user
paths:
  /Cocktails:
    get:
      tags:
        - cocktail
      summary: Finds Pets by status
      operationId: findPetsByStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cocktail'
        '400':
          description: Bad request
    post:
      tags:
        - cocktail
      summary: Add a new cocktail
      operationId: addPet
      responses:
        '400':
          description: Bad request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/createcocktail'
    put:
      tags:
        - cocktail
      summary: Update an cocktail
      operationId: updatePet
      responses:
        '400':
          description: Bad request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/cocktail'
    delete:
      tags:
        - cocktail
      summary: Delete cocktail
      operationId: deleteCocktail
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /Cocktail/{id}:
    patch:
      tags:
        - cocktail
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateCocktailbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              changeName:
                summary: Change name
                value:
                  name: "string"
        required: true
    delete:
      tags:
        - cocktail
      summary: Delete cocktail
      operationId: deleteCocktailbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /Categories:
    get:
      tags:
        - Categories
      summary: Finds category
      operationId: findDrink
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
    post:
      tags:
        - Categories
      summary: Add a new category
      operationId: addDrinks
      responses:
        '400':
          description: Bad request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/createCategory'
    put:
      tags:
        - Categories
      summary: Update an category
      operationId: updateDrinks
      responses:
        '400':
          description: Bad request
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Categories
      summary: Delete category
      operationId: deleteDrinks
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /Category/{id}:
    delete:
      tags:
        - Categories
      summary: Delete category
      operationId: deleteCategorybyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /drinks:
    get:
      tags:
        - drinks
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drinks'
    post:
      tags:
        - drinks
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createDrinks'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drinks'
    delete:
      tags:
        - drinks
      summary: Delete purchase order by ID
      operationId: deleteOrder
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /drink/{id}:
    delete:
      tags:
        - drinks
      summary: Delete purchase order by ID
      operationId: DeleteDrinkbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    patch:
      tags:
        - drinks
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updatedrinkbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              changeName:
                summary: Change name
                value:
                  name: "string"
              changeUnitPrice:
                summary: Change unit price
                value:
                  UnitPrice: 120             
        description: Updated user object
        required: true
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        description: Created user object
        required: true
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/{id}:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUserbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserbyId
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    patch:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUserby
      parameters:
        - name: id
          in: path
          description: The user name for login
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              changeUsername:
                summary: Change username
                value:
                  username: "string"
              changePassword:
                summary: Change password
                value:
                  password: "string"             
        description: Updated user object
        required: true
components:
  schemas:
    Drinks:
      type: array
      items:
        properties:
          id:
            type: integer
          Name:
            type: string
          UnitPrice:
            type: integer
          Category:
            type: string
    createDrinks:
      type: array
      items:
        properties:
          Name:
            type: string
          UnitPrice:
            type: integer
          Category:
            type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    createCategory:
      type: object
      properties:
        name:
          type: string
    createUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
    createcocktail:
      type: object
      properties:
        name:
          type: string
        composition:
          type: array
          items:
            $ref: '#/components/schemas/Drinks'
    cocktail:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        composition:
          type: array
          items:
            $ref: '#/components/schemas/Drinks'